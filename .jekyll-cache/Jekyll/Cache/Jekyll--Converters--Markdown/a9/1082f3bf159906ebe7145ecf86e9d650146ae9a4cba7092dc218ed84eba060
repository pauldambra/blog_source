I"ž”<!--alex ignore banging --->
<p>I posted about my <a href="/reactotype/part-one.html">impressions of working with React</a> slowly building an HTML table and banging on about it. I ended that post with one of the more memorable cliff-hangers in recent time.</p>

<blockquote>
  <h1 id="sorting-and-filtering-the-table">Sorting and Filtering the Table</h1>

  <p>That we will leave till part twoâ€¦ because I introduced a relatively artifical constraint that I didn't want the filtering control to be a part of the table.</p>

  <p>Imagine that there will be many tables with the same filter. I don't want to bind the filter to any one table or insist that every table has it.</p>

  <p>At first I expected that it would force me to understand React's components and how to compose themâ€¦ instead I stumbled on something really cool #cliffhanger</p>
</blockquote>

<p>Exciting! Right?</p>

<p>I want to add a filter control and I don't want it to be bound to a particular table so that it can be re-used.</p>

<!--more-->

<p>So, having squeezed the table to make space for a column for filter controls I needed to do two things</p>

<ol>
  <li>Add the filter controls</li>
  <li>Make them affect the table</li>
</ol>

<p><img src="/images/reactotype_screenshot.png" alt="screenshot of the web page" /></p>

<h1 id="adding-the-filter-controls">Adding the filter controls</h1>

<p>Once I'd made a static HTML version of the filter controls and knew that I was aiming for a number input for the earliest year to display and one for the latest.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">className=</span><span class="s">"col-xs-12"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;div</span> <span class="na">className=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;label</span> <span class="na">htmlFor=</span><span class="s">"earliest"</span><span class="nt">&gt;</span>Earliest<span class="nt">&lt;/label&gt;</span>
		<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"number"</span> 
			   <span class="na">name=</span><span class="s">"earliest"</span>
			   <span class="na">className=</span><span class="s">"form-control"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;/div&gt;</span>
	<span class="nt">&lt;div</span> <span class="na">className=</span><span class="s">"form-group"</span><span class="nt">&gt;</span>
		<span class="nt">&lt;label</span> <span class="na">htmlFor=</span><span class="s">"latest"</span><span class="nt">&gt;</span>Latest<span class="nt">&lt;/label&gt;</span>
		<span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"number"</span> 
			   <span class="na">name=</span><span class="s">"latest"</span> 
			   <span class="na">className=</span><span class="s">"form-control"</span> <span class="nt">/&gt;</span>
	<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>Copying what I already had to turn this into a React component was a very short job. And then I moved onto a little research to see what approaches there were to solve my problem and I stumbled on a JS pub/sub library called <a href="https://github.com/postaljs/postal.js">postal.js</a>.</p>

<blockquote>
  <p>What is it?</p>
</blockquote>

<blockquote>
  <p>Postal.js is an in-memory message bus - very loosely inspired by AMQP - written in JavaScript. Postal.js runs in the browser, or on the server using node.js. It takes the familiar "eventing-style" paradigm (of which most JavaScript developers are familiar) and extends it by providing "broker" and subscriber implementations which are more sophisticated than what you typically find in event emitting/aggregation.</p>
</blockquote>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/** @jsx React.DOM */</span>
<span class="dl">'</span><span class="s1">use strict</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">React</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">React</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">postal</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">postal</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">postal</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">FilterBox</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
    <span class="na">getInitialState</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">earliest</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialEarliest</span><span class="p">,</span>
            <span class="na">latest</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialLatest</span>
        <span class="p">};</span>
    <span class="p">},</span>
    <span class="na">handleEarliestChange</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">earliest</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="mi">10</span><span class="p">)},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    		<span class="nx">postal</span><span class="p">.</span><span class="nx">publish</span><span class="p">({</span>
    			<span class="na">channel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">filters</span><span class="dl">'</span><span class="p">,</span>
    			<span class="na">topic</span><span class="p">:</span> <span class="dl">'</span><span class="s1">year.bounds.change</span><span class="dl">'</span><span class="p">,</span> 
    			<span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
    		<span class="p">});</span>
    	<span class="p">});</span>
    <span class="p">},</span>
    <span class="na">handleLatestChange</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
    	<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">latest</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="mi">10</span><span class="p">)},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    		<span class="nx">postal</span><span class="p">.</span><span class="nx">publish</span><span class="p">({</span>
    			<span class="na">channel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">filters</span><span class="dl">'</span><span class="p">,</span>
    			<span class="na">topic</span><span class="p">:</span> <span class="dl">'</span><span class="s1">year.bounds.change</span><span class="dl">'</span><span class="p">,</span> 
    			<span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
    		<span class="p">});</span>
    	<span class="p">});</span>
    <span class="p">},</span>
    <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
        	<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-xs-12</span><span class="dl">"</span><span class="o">&gt;</span>
        		<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
        			<span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">earliest</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Earliest</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>        			<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> 
        				   <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">earliest</span><span class="dl">"</span>
        				   <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
        				   <span class="nx">defaultValue</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">earliest</span><span class="p">}</span>
        				   <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialEarliest</span><span class="p">}</span> 
        				   <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialLatest</span><span class="p">}</span>
        				   <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleEarliestChange</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>        		<span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        		<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
        			<span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">latest</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Latest</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>        			<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> 
        				   <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">latest</span><span class="dl">"</span> 
        				   <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
        				   <span class="nx">defaultValue</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">latest</span><span class="p">}</span>
        				   <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialEarliest</span><span class="p">}</span> 
        				   <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialLatest</span><span class="p">}</span>
        				   <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleLatestChange</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>        		<span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        	<span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">FilterBox</span><span class="p">;</span>
</code></pre></div></div>

<h2 id="what-do-we-have">What do we have?</h2>

<h4 id="render">Render</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">(</span>
    	<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">col-xs-12</span><span class="dl">"</span><span class="o">&gt;</span>
    		<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
    			<span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">earliest</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Earliest</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>    			<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> 
    				   <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">earliest</span><span class="dl">"</span>
    				   <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
    				   <span class="nx">defaultValue</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">earliest</span><span class="p">}</span>
    				   <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialEarliest</span><span class="p">}</span> 
    				   <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialLatest</span><span class="p">}</span>
    				   <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleEarliestChange</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>    		<span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    		<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-group</span><span class="dl">"</span><span class="o">&gt;</span>
    			<span class="o">&lt;</span><span class="nx">label</span> <span class="nx">htmlFor</span><span class="o">=</span><span class="dl">"</span><span class="s2">latest</span><span class="dl">"</span><span class="o">&gt;</span><span class="nx">Latest</span><span class="o">&lt;</span><span class="sr">/label</span><span class="err">&gt;
</span>    			<span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="dl">"</span><span class="s2">number</span><span class="dl">"</span> 
    				   <span class="nx">name</span><span class="o">=</span><span class="dl">"</span><span class="s2">latest</span><span class="dl">"</span> 
    				   <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">form-control</span><span class="dl">"</span>
    				   <span class="nx">defaultValue</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">latest</span><span class="p">}</span>
    				   <span class="nx">min</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialEarliest</span><span class="p">}</span> 
    				   <span class="nx">max</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialLatest</span><span class="p">}</span>
    				   <span class="nx">onChange</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">handleLatestChange</span><span class="p">}</span><span class="sr">/</span><span class="err">&gt;
</span>    		<span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    	<span class="o">&lt;</span><span class="sr">/div</span><span class="err">&gt;
</span>    <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we've added a react specific attribute <code class="language-plaintext highlighter-rouge">defaultValue</code> to set the starting state of the inputs, added min and max validation using properties passed in to the component and an onChange handler specific to each number input.</p>

<h4 id="initial-state">Initial state</h4>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">getInitialState</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="p">{</span>
        <span class="na">earliest</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialEarliest</span><span class="p">,</span>
        <span class="na">latest</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">initialLatest</span>
    <span class="p">};</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here the default values for the earliest and latest state are set.</p>

<h4 id="event-handlers">Event Handlers</h4>

<p>These two handlers are the same except for operating on a different property of the state object.</p>

<p>Yes, yes, remove all duplication. Butâ€¦ the duplicate methods are next to each other and I've half a mind to make each control a React component which would remove this duplication so why do that work twice.</p>

<p>(I got all excited about postal.js and wrote this post before finishing the component)</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">handleLatestChange</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">(</span>
		<span class="p">{</span><span class="na">latest</span><span class="p">:</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span> <span class="mi">10</span><span class="p">)},</span> 
		<span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
			<span class="nx">postal</span><span class="p">.</span><span class="nx">publish</span><span class="p">({</span>
				<span class="na">channel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">filters</span><span class="dl">'</span><span class="p">,</span>
				<span class="na">topic</span><span class="p">:</span> <span class="dl">'</span><span class="s1">year.bounds.change</span><span class="dl">'</span><span class="p">,</span> 
				<span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
			<span class="p">});</span>
		<span class="p">}</span>
	<span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here when an event is received the function calls <a href="http://facebook.github.io/react/docs/component-api.html#setstate"><code class="language-plaintext highlighter-rouge">setState</code></a> on the React component. This merges the object provided as the first argument with the component's current state.</p>

<p>Since that update doesn't necessarily occur immediately the method takes a callback which runs after the update completes.</p>

<p>In this case the callback uses postal to publish a message. Postal allows you to hold a reference to a channel but here we're using a convenience method that allows you to specify the channel.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">postal</span><span class="p">.</span><span class="nx">publish</span><span class="p">({</span>
	<span class="na">channel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">filters</span><span class="dl">'</span><span class="p">,</span>
	<span class="na">topic</span><span class="p">:</span> <span class="dl">'</span><span class="s1">year.bounds.change</span><span class="dl">'</span><span class="p">,</span> 
	<span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span>
<span class="p">});</span>
</code></pre></div></div>

<p>So, on channel 'filters' publish a message with the topic 'year.bounds.change' including the component's state as the message data.</p>

<p>(and yes the first thing I did when subscribing was type in one of those magic strings incorrectly so there's an improvement to be made in my usage there!)</p>

<p>This gives us a phenomenally useless pub/sub mechanism with no subscribersâ€¦</p>

<h1 id="subscribing-is-even-harder">Subscribing is even harder</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">componentWillMount</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">postal</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">({</span>
	  <span class="na">channel</span><span class="p">:</span> <span class="dl">"</span><span class="s2">filters</span><span class="dl">"</span><span class="p">,</span>
	  <span class="na">topic</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">year.bounds.change</span><span class="dl">"</span><span class="p">,</span>
	  <span class="na">callback</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">envelope</span><span class="p">)</span> <span class="p">{</span>
	    <span class="k">this</span><span class="p">.</span><span class="nx">filterData</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
	  <span class="p">}</span>
	<span class="p">}).</span><span class="nx">context</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</code></pre></div></div>

<p>Postal's subscribe helper takes an object with the same properties as publish. Here for messages posted to a given channel and topic it will call the provided callback.</p>

<p>The <a href="http://facebook.github.io/react/docs/component-specs.html#mounting-componentwillmount"><code class="language-plaintext highlighter-rouge">componentWillMount</code></a> method of the React component is called once before initial rendering so it is perfect for this setup.</p>

<h1 id="messy-pay-table-reacting-to-filtering">Messy Pay Table Reacting to Filtering</h1>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">PayTable</span> <span class="o">=</span> <span class="nx">React</span><span class="p">.</span><span class="nx">createClass</span><span class="p">({</span>
    <span class="na">getInitialState</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">{</span>
            <span class="na">sortDirection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">descending</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">data</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">payYears</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">sortDescending</span><span class="p">)</span>
        <span class="p">};</span>
    <span class="p">},</span>
    <span class="na">preparePayData</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="nx">options</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">yearBounds</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">)</span> <span class="p">{</span>
                        <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">year</span> <span class="o">&gt;=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">yearBounds</span><span class="p">.</span><span class="nx">earliest</span> 
                            <span class="o">&amp;&amp;</span> <span class="nx">element</span><span class="p">.</span><span class="nx">year</span> <span class="o">&lt;=</span> <span class="nx">options</span><span class="p">.</span><span class="nx">yearBounds</span><span class="p">.</span><span class="nx">latest</span><span class="p">;</span>
                    <span class="p">})</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sortDirection</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">data</span> <span class="o">=</span> <span class="nx">data</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sortDirection</span><span class="o">===</span><span class="dl">'</span><span class="s1">descending</span><span class="dl">'</span> 
                                <span class="p">?</span> <span class="nx">sortDescending</span>
                                <span class="p">:</span> <span class="nx">sortAscending</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">data</span><span class="p">:</span> <span class="nx">data</span><span class="p">});</span>
    <span class="p">},</span>
    <span class="na">sortData</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">sortDirection</span><span class="p">:</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">sortDirection</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">descending</span><span class="dl">'</span>
                                     <span class="p">?</span> <span class="dl">'</span><span class="s1">ascending</span><span class="dl">'</span>
                                     <span class="p">:</span> <span class="dl">'</span><span class="s1">descending</span><span class="dl">'</span><span class="p">},</span> 
                      <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">preparePayData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">payYears</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">);</span>
                      <span class="p">})</span>
    <span class="p">},</span>
    <span class="na">filterData</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">filterBounds</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">setState</span><span class="p">({</span><span class="na">yearBounds</span><span class="p">:</span> <span class="nx">filterBounds</span><span class="p">},</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">preparePayData</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">props</span><span class="p">.</span><span class="nx">payYears</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">);</span>
        <span class="p">});</span>
      <span class="p">},</span>
        <span class="na">componentWillMount</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">postal</span><span class="p">.</span><span class="nx">subscribe</span><span class="p">({</span>
          <span class="na">channel</span><span class="p">:</span> <span class="dl">"</span><span class="s2">filters</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">topic</span> <span class="p">:</span> <span class="dl">"</span><span class="s2">year.bounds.change</span><span class="dl">"</span><span class="p">,</span>
          <span class="na">callback</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">filterData</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span>
          <span class="p">}</span>
        <span class="p">}).</span><span class="nx">context</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
      <span class="p">},</span>
    <span class="na">render</span><span class="p">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span>
            <span class="o">&lt;</span><span class="nx">table</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">table table-striped</span><span class="dl">"</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
                    <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
                        <span class="o">&lt;</span><span class="nx">th</span> <span class="nx">onClick</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">sortData</span><span class="p">}</span>
                            <span class="nx">className</span><span class="o">=</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">sortDirection</span><span class="p">}</span><span class="o">&gt;</span>
                            <span class="nx">Year</span>
                        <span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">All</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Full</span><span class="o">-</span><span class="nx">time</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                        <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Part</span><span class="o">-</span><span class="nx">time</span><span class="o">&lt;</span><span class="sr">/th</span><span class="err">&gt;
</span>                    <span class="o">&lt;</span><span class="sr">/tr</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="sr">/thead</span><span class="err">&gt;
</span>                <span class="o">&lt;</span><span class="nx">tbody</span><span class="o">&gt;</span>
                    <span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">state</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">payYear</span><span class="p">)</span> <span class="p">{</span>
                      <span class="k">return</span> <span class="o">&lt;</span><span class="nx">PayRow</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">payYear</span><span class="p">.</span><span class="nx">year</span><span class="p">}</span> <span class="nx">payYear</span><span class="o">=</span><span class="p">{</span><span class="nx">payYear</span><span class="p">}</span> <span class="sr">/&gt;</span><span class="err">;
</span>                    <span class="p">})}</span>
                <span class="o">&lt;</span><span class="sr">/tbody</span><span class="err">&gt;
</span>            <span class="o">&lt;</span><span class="sr">/table</span><span class="err">&gt;
</span>        <span class="p">);</span>
    <span class="p">}</span>
<span class="p">});</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">PayTable</code> now has a <code class="language-plaintext highlighter-rouge">preparePayData</code> method which has the responsibility of taking some data and the component's current state and setting the state's data property correctly.</p>

<p>Now all the <code class="language-plaintext highlighter-rouge">filterData</code> and <code class="language-plaintext highlighter-rouge">sortData</code> methods need to do is update state and then call <code class="language-plaintext highlighter-rouge">preparePayData</code>.
<!--alex ignore hook --->
The point here is how useful it was to use postal.js to hook these two components together. I <em>lurve</em> this!</p>

<p><img src="/images/reactotype.gif" alt="demo of the web page" /></p>

<h1 id="next-up">Next Up</h1>

<p>A little bit of tidying up and add a chart view. #holidaycode</p>
:ET