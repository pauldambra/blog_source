I""A<p>This post is part of a series where I'm hoping to prove to myself that building a dynamic website with NodeJS is much more fun than using a CMS platform. <a href="/2014/02/websites-cms.html">See the first post for an explanation of why</a></p>

<p><a href="/2014/03/testing-with-browserstack-and-selenium.html">Previous Post</a></p>

<p>After a day writing DDL for a project that has manual schema versioning against MS SQL and is going through a lot of changes I feel honour bound to write a post about storing data in the Omniclopse site.</p>

<!--more-->

<p>I'll be using MongoDB for two reasons.</p>

<ol>
  <li>The implicit schema of a NoSQL database is awesome when you're not sure of the final shape of the data.</li>
  <li>Storing a data structure that's almost definitely going to be sent over the wire as JSON asâ€¦ JSON makes a lot of sense to me.</li>
</ol>

<h1 id="first-steps">First Steps</h1>
<p>At least for now each view will have its own document in the database (At the moment there's only one view! so why complicate things).</p>

<p>First it is necessary to <code class="language-plaintext highlighter-rouge">npm install --save mongojs</code> and then require mongojs within the server module.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">mongojs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongojs</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">mongojs</span><span class="p">(</span><span class="dl">'</span><span class="s1">omniclopse</span><span class="dl">'</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">pages</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>Here the variable <code class="language-plaintext highlighter-rouge">db</code> connects to a MongoDB database called omniclopse and a collection called pages.</p>

<p>Next the call to the DB to get the home page data is added to the home route.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">){</span>
    <span class="nx">db</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">findOne</span><span class="p">({</span> <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">home</span><span class="dl">'</span> <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="dl">'</span><span class="s1">500</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span><span class="na">error</span><span class="p">:</span> <span class="nx">err</span><span class="p">});</span>
        <span class="p">}</span> 
        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="dl">'</span><span class="s1">home</span><span class="dl">'</span><span class="p">,</span> <span class="nx">doc</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="dl">'</span><span class="s1">404</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>I think this code is a bit ugly but we'll be coming back to the server later on!</p>

<h1 id="error-pages">Error Pages</h1>
<p>Adding the 404 and 500 pages is straightforward.</p>

<p>For example:</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container bg-danger"</span><span class="nt">&gt;</span>
	<span class="nt">&lt;h1&gt;</span>404<span class="nt">&lt;/h1&gt;</span>
	<span class="nt">&lt;div&gt;</span>Dang! That doesn't seem to exist.<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</code></pre></div></div>

<p>There are two cases where the app will need to return a 404.</p>

<p>First, when the URL doesn't exist an HTTP status 400 should be returned</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET unknown route sends 404 status</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">respond with 404 html</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
    <span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/never-exists</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="sr">/html/</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Second, when the database has no entry for the page then the HTTP status should be 200 but the page should be a 404.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET known route with no data sends 404 page with 200 status</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">respond with 404 html</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
    <span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/html</span><span class="dl">'</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="sr">/html/</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span>
      <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="nx">res</span><span class="p">.</span><span class="nx">text</span><span class="p">.</span><span class="nx">should</span><span class="p">.</span><span class="nx">include</span><span class="p">(</span><span class="dl">"</span><span class="s2">Dang! That doesn't seem to exist.</span><span class="dl">"</span><span class="p">);</span>
        <span class="nx">done</span><span class="p">();</span>
      <span class="p">});</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h2 id="ah-but">Ah, butâ€¦</h2>
<p>â€¦the MongoDB pages collection is empty. Once this collection contains a match for <code class="language-plaintext highlighter-rouge">name: home</code> then this test will fail.</p>

<h1 id="run-tests-against-a-different-database-instance">Run Tests against a different database instance</h1>
<p>Much simpler than mocking the DB (and because I couldn't figure out how to mock it without breaking SuperTest) is running against a test copy of the DB. Very little code to write and the best code is the code you (I?) don't write.</p>

<p>The code to initialise the database becomes</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">dbName</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span> <span class="p">?</span> <span class="dl">'</span><span class="s1">omnitest</span><span class="dl">'</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">omniclopse</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">db</span> <span class="o">=</span> <span class="nx">mongojs</span><span class="p">(</span><span class="nx">dbName</span><span class="p">,</span> <span class="p">[</span><span class="dl">'</span><span class="s1">pages</span><span class="dl">'</span><span class="p">]);</span>
</code></pre></div></div>

<p>and in the test spec files</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">server</span><span class="p">;</span>

<span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span> 
    <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">).</span><span class="nx">app</span><span class="p">;</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Now Mocha tests all pass and running the site gives</p>
<p><img src="/images/home404.png" alt="404 page" class="img-responsive img-thumbnail" /></p>

<p>After adding <code class="language-plaintext highlighter-rouge">{name:'home',carouselImages:[],panels:[]}</code> to the pages collection using the terminal and reloading the page</p>
<p><img src="/images/homeBare.png" alt="empty page" class="img-responsive img-thumbnail" /></p>

<p>Adding an array of carousel images to the home document:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">db.pages.update(</span><span class="p">{</span><span class="err">name:</span><span class="w"> </span><span class="err">'home'</span><span class="w"> </span><span class="p">}</span><span class="err">,</span><span class="w">
                </span><span class="p">{</span><span class="err">$set:</span><span class="w"> </span><span class="p">{</span><span class="w">
                          </span><span class="err">carouselImages:</span><span class="w"> </span><span class="p">[</span><span class="w">
                            </span><span class="p">{</span><span class="w">
                              </span><span class="err">url:'http://www.fillmurray.com/</span><span class="mi">900</span><span class="err">/</span><span class="mi">300</span><span class="err">'</span><span class="p">,</span><span class="w">
                              </span><span class="err">alt:'Bill</span><span class="w"> </span><span class="err">Murray'</span><span class="p">,</span><span class="w">
                              </span><span class="err">caption:'Bill</span><span class="w"> </span><span class="err">Murray'</span><span class="w">
                            </span><span class="p">},</span><span class="w">
                            </span><span class="p">{</span><span class="w">
                              </span><span class="err">url:'http://www.placecage.com/</span><span class="mi">900</span><span class="err">/</span><span class="mi">300</span><span class="err">'</span><span class="p">,</span><span class="w">
                              </span><span class="err">alt:'Nick</span><span class="w"> </span><span class="err">Cage'</span><span class="p">,</span><span class="w">
                              </span><span class="err">caption:'Nick</span><span class="w"> </span><span class="err">Cage'</span><span class="w">
                            </span><span class="p">},</span><span class="w">
                            </span><span class="p">{</span><span class="w">
                              </span><span class="err">url:'http://www.nicenicejpg.com/</span><span class="mi">900</span><span class="err">/</span><span class="mi">300</span><span class="err">'</span><span class="p">,</span><span class="w">
                              </span><span class="err">alt:'Vanilla</span><span class="w"> </span><span class="err">Ice'</span><span class="p">,</span><span class="w">
                              </span><span class="err">caption:'Vanilla</span><span class="w"> </span><span class="err">Ice'</span><span class="w">
                            </span><span class="p">}</span><span class="w">
                          </span><span class="p">]</span><span class="w">
                        </span><span class="p">}</span><span class="w">
                </span><span class="p">}</span><span class="err">)</span><span class="w">
</span></code></pre></div></div>

<p>results in:</p>
<p><img src="/images/homeCarousel.png" alt="partial page" class="img-responsive img-thumbnail" /></p>

<p>Adding an array of panels to the home document results in the desired home page:</p>
<p><img src="/images/homeFull.png" alt="full page" class="img-responsive img-thumbnail" /></p>

<h1 id="e-voila">E Voila</h1>
<p>Very little code, very little effort and the page data is being loaded from the database. Hurrah!</p>

<h1 id="next">Next</h1>
<p>I'll be adding authentication so that we can then allow an admin user at Omniclopse HQ to change and add data</p>
:ET