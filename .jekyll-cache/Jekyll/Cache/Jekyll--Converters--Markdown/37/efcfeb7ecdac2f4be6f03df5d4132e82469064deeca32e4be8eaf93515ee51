I"ê9<p>This post is part of a series where I'm hoping to prove to myself that building a dynamic website with NodeJS is much more fun than using a CMS platform. <a href="/2014/02/websites-cms.html">See the first post for an explanation of why</a></p>

<p>The code can be found on <a href="https://github.com/pauldambra/omniclopse">GitHub</a></p>

<p><a href="/Websites-CMS-Platform-Storing-Data2.html">Previous Post</a></p>

<p>This was the first part of the process which felt 'hard' so where I've felt the absence of a CMS platform but it's also only the second time I've ever implemented authentication using NodeJS. And still only boiled down to a few hours work.</p>

<!--more-->

<h2 id="passport">Passport</h2>
<p>With an eye to future expansion of what authentication the site may do the choice of technology for managing login is a <a href="http://passportjs.org/">Node module called PassPort</a>. PassportJS is a flexible and modular authentication middleware foor NodeJs.</p>

<p>Initially the site will only support logging in using users stored in the database but Passport once setup is extendable to allow login via oauth, openid, twitter, facebook, and more. Passport uses Strategies to manage the login process.</p>

<h2 id="tests">Tests</h2>
<p>In order to test login the site will need to allow creation of users, GETing /login, POSTing to /login and GETing /logout</p>

<p>There's no need to support registration now but it's <em>so</em> similar to login and creation that implementation would be trivial.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">creating users</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should be possible to create a user</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should not be possible to create a duplicate user</span><span class="dl">'</span><span class="p">);</span>
<span class="p">})</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">GET request to /login</span><span class="dl">'</span><span class="p">,</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should send back the login page</span><span class="dl">'</span><span class="p">);</span>
  <span class="c1">//how to test this?!</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should follow 302 when login is invalid and show flash message</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">logging in by POSTing to /login</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">without valid username cannot login</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">without valid password cannot login</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">with valid credentials can login</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">logging out by GETing /logout</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should log out the logged in user</span><span class="dl">'</span><span class="p">);</span>
  <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should throw no errors if there is no user logged in</span><span class="dl">'</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Firstly in order to create users it's necessary to <code class="language-plaintext highlighter-rouge">npm install --save bcrypt</code> and then (borrowing liberally from StackOverflow) create a module that hashes and salts a given password and saves a user with that hash into the database.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">bcrypt</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">bcrypt</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">SALT_WORK_FACTOR</span> <span class="o">=</span> <span class="mi">10</span><span class="p">;</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">db</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="p">{</span>
    <span class="na">create</span><span class="p">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">genSalt</span><span class="p">(</span><span class="nx">SALT_WORK_FACTOR</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">salt</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
                <span class="k">return</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="nx">bcrypt</span><span class="p">.</span><span class="nx">hash</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">salt</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">hash</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                    <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
                    <span class="k">return</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">save</span><span class="p">({</span>
                    <span class="na">username</span><span class="p">:</span><span class="nx">username</span><span class="p">,</span>
                    <span class="na">password</span><span class="p">:</span><span class="nx">hash</span>
                <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
                        <span class="nx">callback</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">err</span><span class="p">);</span>
                    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                        <span class="nx">callback</span><span class="p">(</span><span class="dl">'</span><span class="s1">user created</span><span class="dl">'</span><span class="p">);</span>
                    <span class="p">}</span>
                <span class="p">});</span>
            <span class="p">});</span>
        <span class="p">});</span>
    <span class="p">}</span>
  <span class="p">};</span>
<span class="p">};</span>
</code></pre></div></div>

<p>This function takes a database parameter so that the tests and the command line runner that exercise it can pass in different databases. It also demonstrates the smelliness of nested callbacks that I've put off dealing with three times now‚Ä¶ hitting the same problem three times is a definite flag it's time to deal with it!</p>

<p>(but not <em>right</em> now)</p>

<p>as an aside - <a href="https://twitter.com/LemoncogFoReal">a colleague</a> spotted how smelly this code is <a href="https://twitter.com/LemoncogFoReal/status/468024884741013504">in a screenshot on twitter from across a room!</a></p>

<h1 id="logging-in-tests">Logging in Tests</h1>
<p>The test setup for the logging in tests is slightly different as it's necessary to grab the underlying SuperAgent instance that SuperTest wraps. SuperAgent will manage its cookies so you can extend the example below to allow tests of behaviour once logged in.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">expect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">chai</span><span class="dl">'</span><span class="p">).</span><span class="nx">expect</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">server</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">agent</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">db</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">login</span><span class="p">;</span>

<span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//set environment to test and init things</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span> 
    <span class="nx">db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server/db</span><span class="dl">'</span><span class="p">).</span><span class="nx">db</span><span class="p">;</span>
    <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">).</span><span class="nx">app</span><span class="p">;</span>
    <span class="nx">agent</span> <span class="o">=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">agent</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Having access to the agent and the server application then allows test that look like</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">without valid username cannot login</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">agent</span>
          <span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">send</span><span class="p">({</span> <span class="na">username</span><span class="p">:</span> <span class="dl">'</span><span class="s1">not a real user</span><span class="dl">'</span><span class="p">,</span> <span class="na">password</span><span class="p">:</span> <span class="dl">'</span><span class="s1">password</span><span class="dl">'</span> <span class="p">})</span>
          <span class="p">.</span><span class="nx">end</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">status</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="mi">302</span><span class="p">);</span>
            <span class="nx">expect</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">header</span><span class="p">.</span><span class="nx">location</span><span class="p">).</span><span class="nx">to</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="dl">'</span><span class="s1">/login</span><span class="dl">'</span><span class="p">);</span>
            <span class="nx">done</span><span class="p">();</span>
          <span class="p">});</span>
    <span class="p">});</span>
</code></pre></div></div>

<p>Not hugely different in syntax to the SuperTest tests but necessary in order to interact with the session.</p>
:ET