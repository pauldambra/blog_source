I"¶<p>â€¦than the <a href="http://en.wikipedia.org/wiki/Factory_method_pattern">Factory pattern</a>.</p>

<p>So anyway I learn about design patterns and begin to use the factory pattern. And much like many other people I settle into a world where there are no other patterns. All is comfortable and fluffy and instantiated from calling code much as it was in days gone by.</p>

<!--more-->

<p>Then comes the day I need to handle the responses to a monthly mailing to over 70,000 email addresses and so I write this incredible code. Well maybe not incredibleâ€¦ what would be the right word - oh yeah "messy".</p>

<p>It all started out really nice and clean but then I realised I needed to handle a couple of more cases than I'd intended when I beganâ€¦ and lots and lots of mail servers have been configured to return non-standard responses to unsuccessful mailings which is great for a human but not so great for a piece of software trying to classify that response.</p>

<p>So time passes and I'm correctly responding to over 90% of the returns we get (all of which stops evil companies like Yahoo for blocklisting us because we're mailing to non-existent addresses) but my code has got really, really messy.</p>

<p>Really messy.</p>

<p>Oh, it's awful.</p>

<p>I decide to refactor but no matter what I think of I can't get a Factory to solve my problem. Yeah, yeah I know but if you're gonna have a hammer it might as well be <a href="http://en.wikipedia.org/wiki/Golden_hammer">shiny</a>. Now, I could go ahead and invent my own solution but as far as I'm concerned writing software is about having to do less and that sounds like too much work.</p>

<p>A little thought later and I decide it's time to add the command pattern to my arsenal. After all, I'm categorising mail, potentially selecting from a database, potentially updating a database, potentially replying to or forwarding an email and then deleting that mail. Wrap that up and then bash out the various alternatives I need. <a href="http://www.urbandictionary.com/define.php?term=bazinga">Bazinga</a>!</p>

<p>I also like to be sure about what I'm doing before I start. Well, sometimesâ€¦ So I dig out <a href="http://www.amazon.com/Patterns-Catalog-Reusable-Design-Illustrated/dp/0471258393">Patterns in Java Volume 1</a> and do a little reading and what I saw was such a great idea I realised I had to do everything I could not to forgetâ€¦</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">AbstractCommand</span> <span class="o">{</span>
	<span class="kd">public</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">CommandManager</span> <span class="n">manager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CommandManager</span><span class="o">();</span>
	<span class="kd">public</span> <span class="kd">abstract</span> <span class="nf">thePointOfThisClass</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Now this made me double takeâ€¦ You might be saying "So What?" but I said "What the what?".</p>

<p>See I write lots of code like this</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span> <span class="o">{</span> 
	<span class="nc">ThingManager</span> <span class="n">thisThingManager</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ThingManager</span><span class="o">();</span>
	<span class="nc">Thing</span> <span class="n">thisThing</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thing</span><span class="o">();</span>
	<span class="n">thisThingManager</span><span class="o">.</span><span class="na">doThisThingToThatOtherThing</span><span class="o">(</span><span class="n">thisThing</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>I dig <a href="http://en.wikipedia.org/wiki/Single_responsibility_principle">separation of responsibility</a> so I like to separate out a "manager" or "controller" class from the other classes who don't need the logic that it encapsulates.</p>

<p>But that pretty tightly couples everything together. If I manage to strip a lot of code out of something (as I did when I bought the excellent <a href="http://www.dimastr.com/redemption/">Outlook redemption library</a> recently) then there's more to change.</p>

<p>Here all of the logic for the command is bound up within it even though <code class="language-plaintext highlighter-rouge">CommandManager</code> class is still separate. I like that and I hadn't realised you could do this kind of thing by declaring something as staticâ€¦ I like to find a nice little elegant bit of sugar like that.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span><span class="o">{</span>
    <span class="nc">Thing</span> <span class="n">thisThing</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Thing</span><span class="o">();</span>
    <span class="n">thisThing</span><span class="o">.</span><span class="na">DoThatThingToThisThing</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>or even better with a little factory magic in the background</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyClass</span><span class="o">{</span>
	<span class="nc">Thing</span><span class="o">.</span><span class="na">DoSomethingToThisThing</span><span class="o">(</span><span class="nc">FactoryChoiceEnum</span><span class="o">.</span><span class="na">Choice</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>So we've got one line of code and with reasonable variable names it doesn't even need comments. For Exampleâ€¦</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">MyClass</span> <span class="p">{</span>
	<span class="n">currentMailItem</span><span class="p">.</span><span class="nf">DealWithThisMailItem</span><span class="p">(</span><span class="n">MailResponseEnum</span><span class="p">.</span><span class="n">Unsubscribe</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>I hope that you've stumbled on this post and it solves your problem.</p>
:ET