I"ìu<p>This post is part of a series where I'm hoping to prove to myself that building a dynamic website with NodeJS is much more fun than using a CMS platform. <a href="/2014/02/websites-cms.html">See the first post for an explanation of why</a></p>

<p>The code can be found on <a href="https://github.com/pauldambra/omniclopse">GitHub</a></p>

<p><a href="/Websites-CMS-Platform-promises.html">Previous Post</a></p>

<p>So, in the last post I worked on switching some callback code to using promises with <a href="https://www.npmjs.org/package/bluebird">Bluebird</a> library but as I've not seen much promisified (definitely a word!) code I wasn't sure whether it was any good.</p>

<p>So I posted <a href="http://codereview.stackexchange.com/questions/51712/is-this-a-reasonable-way-to-implement-promises-in-node-js">a question on the code review stackexchange</a> asking for feedback.</p>

<!--more-->

<p>Here's the code I had written:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//I'm using bluebird.js for promises</span>
<span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">compare</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">);</span>

<span class="c1">//this strategy is used by passport to handle logins</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">localStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">matchedUser</span><span class="p">;</span>

  <span class="kd">var</span> <span class="nx">comparePassword</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">){</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">NoMatchedUserError</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="c1">//memoise the loaded user so it can be returned below</span>
    <span class="nx">matchedUser</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
    <span class="k">return</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">matchedUser</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
  <span class="p">};</span>

  <span class="nx">users</span><span class="p">.</span><span class="nx">findOneAsync</span><span class="p">({</span> <span class="na">username</span><span class="p">:</span> <span class="nx">username</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">comparePassword</span><span class="p">)</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">isMatch</span>
        <span class="p">?</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">matchedUser</span><span class="p">)</span>
        <span class="p">:</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Incorrect password.</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">NoMatchedUserError</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Incorrect username.</span><span class="dl">'</span> <span class="p">});</span>
    <span class="p">})</span> 
    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">done</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>and here's the code that was suggested</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//I'm using bluebird.js for promises</span>
<span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">compare</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">);</span>


<span class="c1">// This strategy is used by passport to handle logins</span>
<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">localStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">users</span><span class="p">.</span><span class="nx">findOneAsync</span><span class="p">({</span><span class="na">username</span><span class="p">:</span> <span class="nx">username</span><span class="p">}).</span><span class="nx">bind</span><span class="p">({})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nx">NoMatchedUserError</span><span class="p">(</span><span class="dl">'</span><span class="s1">Incorrect username.</span><span class="dl">'</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Incorrect password.</span><span class="dl">'</span> <span class="p">};</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">nodeify</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>there are a couple of differences here that led to some great learning for me!</p>

<h1 id="bind">Bind</h1>

<p>The first is <a href="https://github.com/petkaantonov/bluebird/blob/master/API.md#binddynamic-thisarg---promise">the bind function</a>.</p>

<p>In JS there is <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">a method on the function prototype called bind</a>. Bind returns a new function identical to the original except that the first argument to bind sets the <code class="language-plaintext highlighter-rouge">this</code> context for the function and any subsequent arguments are 'stored' and precede any arguments given when the new function is eventually called.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">original</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
<span class="p">}</span> <span class="c1">// in a browser for example the original function logs the window object and an empty array</span>

<span class="kd">var</span> <span class="nx">withNoParameters</span> <span class="o">=</span> <span class="nx">original</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="na">ada</span><span class="p">:</span><span class="dl">'</span><span class="s1">lovelace</span><span class="dl">'</span><span class="p">});</span>
<span class="nx">withNoParameters</span><span class="p">();</span> <span class="c1">//logs Object {ada: "lovelace"} and an empty array</span>

<span class="kd">var</span> <span class="nx">withParameters</span> <span class="o">=</span> <span class="nx">withNoParameters</span><span class="p">.</span><span class="nx">bind</span><span class="p">({</span><span class="na">ada</span><span class="p">:</span><span class="dl">'</span><span class="s1">lovelace</span><span class="dl">'</span><span class="p">},</span><span class="mi">34</span><span class="p">)</span>
<span class="nx">withParameters</span><span class="p">();</span> <span class="c1">//logs Object {ada: "lovelace"} and then [34]</span>
<span class="nx">withParameters</span><span class="p">(</span><span class="dl">'</span><span class="s1">Hedy Lamarr</span><span class="dl">'</span><span class="p">);</span> <span class="c1">//logs Object {ada: "lovelace"} and then [34, "Hedy Lamarr"] </span>
</code></pre></div></div>

<p>The bluebird bind function doesn't allow you to add arguments but does provide the ability to bind the context. Or rather of returning a promise bound to the given context. That context follows the promise down the chain (unless a new <code class="language-plaintext highlighter-rouge">Promise</code> is created)</p>

<p>So here we can use it to simplify the code:</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">compare</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">localStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">users</span><span class="p">.</span><span class="nx">findOneAsync</span><span class="p">({</span><span class="na">username</span><span class="p">:</span> <span class="nx">username</span><span class="p">})</span>
    <span class="p">.</span><span class="nx">bind</span><span class="p">({})</span> <span class="c1">//replace the findOneAsync promise with one bound to an empty object</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span> <span class="c1">// add or update a user property on the bound object </span>
        <span class="k">return</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span> <span class="c1">//still able to refer to the same context</span>
      <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<h1 id="nodeify">Nodeify</h1>

<p>The other fantabulous feature is <a href="https://github.com/petkaantonov/bluebird/blob/master/API.md#nodeifyfunction-callback---promise">nodeify</a>. In the original code above the promisify functions convert code that expects to receive a callback into code that returns a promise. Nodeify does the reverse and returns a promise that when it is resolved will call the provided callback. Or as the bluebird docs explain it:</p>

<blockquote>
  <p>Register a node-style callback on this promise. When this promise is is either fulfilled or rejected, the node callback will be called back with the node.js convention where error reason is the first argument and success value is the second argument. The error argument will be <code class="language-plaintext highlighter-rouge">null</code> in case of success.</p>
</blockquote>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">users</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisifyAll</span><span class="p">(</span><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">compare</span> <span class="o">=</span> <span class="nb">Promise</span><span class="p">.</span><span class="nx">promisify</span><span class="p">(</span><span class="nx">bcrypt</span><span class="p">.</span><span class="nx">compare</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">localStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">users</span><span class="p">.</span><span class="nx">findOneAsync</span><span class="p">({</span><span class="na">username</span><span class="p">:</span> <span class="nx">username</span><span class="p">}).</span><span class="nx">bind</span><span class="p">({})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
      <span class="p">}</span>
    <span class="p">}).</span><span class="nx">nodefiy</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span> <span class="c1">//on success calls done(null, this.user)</span>
<span class="p">});</span>
</code></pre></div></div>

<h1 id="so">So</h1>
<p>These were both transformative for me. I now have a way to plug promises into my code bit by bit and to carry on using libraries that know nothing about promises.</p>

<h1 id="but">But</h1>
<p>Passport uses an optional third argument to populate the flash message so you can put a meaningful message in front of a user when they try to login and aren't successful.</p>

<p>I poked at nodeify with a stick and a glass of wine and couldn't make that workâ¦ because nodeify only passes on the error object or the success value.</p>

<h1 id="wonderful-community">Wonderful Community</h1>
<p>After reading the code for nodeify and realising I had far less idea how JS works than than I thought I did and much, much less than the library authors I <a href="http://stackoverflow.com/questions/23920589/how-to-pass-a-third-argument-to-a-callback-using-bluebird-js-nodeify">posted on StackOverflow</a> with an example of what I wanted to achieve</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">localStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">users</span><span class="p">.</span><span class="nx">findOneAsync</span><span class="p">({</span><span class="na">username</span><span class="p">:</span> <span class="nx">username</span><span class="p">}).</span><span class="nx">bind</span><span class="p">({})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nx">NoMatchedUserError</span><span class="p">(</span><span class="dl">'</span><span class="s1">Incorrect username.</span><span class="dl">'</span><span class="p">);</span>
          <span class="c1">//should be equivalent to:</span>
          <span class="c1">// return done(null, false, {message:'something'});</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="nx">user</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">password</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">isMatch</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">user</span><span class="p">;</span>
        <span class="c1">//is equivalent to:</span>
        <span class="c1">// return done(null, this.user);</span>
      <span class="p">}</span>
      <span class="k">else</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="p">{</span> <span class="na">message</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Incorrect password.</span><span class="dl">'</span> <span class="p">};</span>
        <span class="c1">//should be equivalent to:</span>
        <span class="c1">// return done(null, false, {message:'something else'};</span>
      <span class="p">}</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">nodeify</span><span class="p">(</span><span class="nx">done</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Apart from a message confirming that it wasn't currently possible to use nodeify that way I also got comments from one of the Bluebird project committers that they thought this was a decent use-case and could I log an issueâ¦</p>

<p><a href="https://github.com/petkaantonov/bluebird/issues/219">I did</a>â¦</p>

<p><a href="https://github.com/petkaantonov/bluebird/commit/5ca7743c8f8260d43c2f25951e65177d71450d1c#diff-218b9ea0594b584c56937aadfc377657">And they've added the feature for version 2.0</a></p>

<p>I really love it when a project is responsive! Gives me confidence that they care about what they're building and I'm safe to be using it.</p>

<p>(yes, I'm a massive hippy :-))</p>

<h1 id="and">And</h1>
<p>So I forked Bluebird, cloned it, switched to the 2.0 branch and ran npm build. I (relatively lazily) copied the built js files over the v1.2.4 files that npm had installed in the project and changed the code to use the new feature (with some comments added for this post)â¦</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">.</span><span class="nx">localStrategy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LocalStrategy</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">username</span><span class="p">,</span> <span class="nx">password</span><span class="p">,</span> <span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">users</span><span class="p">.</span><span class="nx">findOneAsync</span><span class="p">({</span> <span class="na">username</span><span class="p">:</span> <span class="nx">username</span> <span class="p">})</span>
    <span class="p">.</span><span class="nx">bind</span><span class="p">([])</span> <span class="c1">//now the context needs to be an array</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">){</span>
      <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nx">NoMatchedUserError</span><span class="p">();</span>
      <span class="p">}</span>
      <span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nx">user</span><span class="p">;</span> <span class="c1">//the first item in the context should be the user</span>
      <span class="k">return</span> <span class="nx">compare</span><span class="p">(</span><span class="nx">password</span><span class="p">,</span> <span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">password</span><span class="p">);</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">passwordsMatch</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">passwordsMatch</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">//don't return a user (as they cannot login)</span>
        <span class="k">this</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Incorrect password.</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//add a message that passport can use for a flash message</span>
      <span class="p">}</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">NoMatchedUserError</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// couldn't find a user so don't return one</span>
      <span class="k">this</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">Incorrect username.</span><span class="dl">'</span><span class="p">;</span> <span class="c1">//add a message that passport can use for a flash message</span>
      <span class="k">return</span> <span class="k">this</span><span class="p">;</span>
    <span class="p">})</span> 
    <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">return</span> <span class="nx">err</span><span class="p">;</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nx">nodeify</span><span class="p">(</span><span class="nx">done</span><span class="p">,</span> <span class="p">{</span><span class="na">spread</span><span class="p">:</span><span class="kc">true</span><span class="p">});</span> <span class="c1">// Yay! </span>
<span class="p">});</span>
</code></pre></div></div>

<p>My code looks how I wanted, does what I wanted, I grok promises much more, and I've learned that the bluebird developers are lovely. Awesomeness!</p>
:ET