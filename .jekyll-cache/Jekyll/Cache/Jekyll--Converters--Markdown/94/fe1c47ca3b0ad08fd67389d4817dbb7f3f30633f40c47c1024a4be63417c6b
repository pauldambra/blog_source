I"vD<p>This post is part of a series where I'm hoping to prove to myself that building a dynamic website with NodeJS is much more fun than using a CMS platform. <a href="/2014/02/websites-cms.html">See the first post for an explanation of why</a></p>

<p>The code can be found on <a href="https://github.com/pauldambra/omniclopse">GitHub</a></p>

<p><a href="/Websites-CMS-Platform-Storing-Data.html">Previous Post</a></p>

<p>The first step is always (or at least should be) to take a step back and decide what to actually doâ€¦</p>

<!--more-->

<p>In the last post the decision was made to store one document per page, and to have a unique index on the documents name property. This fits with a PUT request</p>

<p><a href="http://stackoverflow.com/a/630475/222163">Callers of a PUT method should anticipate the calls are idempotent and made to the URL of a given resource</a>. That is we'll be sending data to <code class="language-plaintext highlighter-rouge">/pages/pageName</code> and not <code class="language-plaintext highlighter-rouge">/pages</code> and repeatedly sending the same document for storage means that the document should be updated not duplicated.</p>

<h2 id="tests">Tests</h2>
<p>This feature requires a set of conditions are tested:</p>
<ul>
	<li>you can't PUT an empty page</li>
	<li>if you PUT a new page you receive a 201</li>
	<li>if you PUT an existing page you receive a 200</li>
	<li>the inserted or updated resource URL is in the location header of the response</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">PUTing pages</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should 400 when no body</span><span class="dl">'</span><span class="p">);</span>

    <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">with new name</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">respond with 201 status</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">with existing name</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">respond with 200 status</span><span class="dl">'</span><span class="p">);</span>
  <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>After a little backwards and forwards the tests ended up as:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">supertest</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">should</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">should</span><span class="dl">'</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">server</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">db</span><span class="p">;</span>

<span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//set environment to test and init things</span>
    <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">NODE_ENV</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">test</span><span class="dl">'</span><span class="p">;</span> 
    <span class="nx">db</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server/db</span><span class="dl">'</span><span class="p">);</span>
    <span class="nx">server</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">../server</span><span class="dl">'</span><span class="p">).</span><span class="nx">app</span><span class="p">;</span>
<span class="p">});</span>

<span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">PUTing pages</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should 400 when no body</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/pages/newPage</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/json</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="sr">/json/</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
    <span class="p">});</span>

    <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">with a new page name</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">db</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">remove</span><span class="p">({},</span> <span class="kc">false</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{});</span>
      <span class="p">});</span>

      <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should respond with 201 status</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
        <span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/pages/newPage</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">newPage</span><span class="dl">'</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span><span class="dl">'</span><span class="s1">/somewhere</span><span class="dl">'</span><span class="p">})</span>
          <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/json</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="sr">/json/</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">location</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/somewhere</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">201</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="p">});</span>

    <span class="nx">describe</span><span class="p">(</span><span class="dl">'</span><span class="s1">with an existing page name</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
      <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">db</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">remove</span><span class="p">({},</span> <span class="kc">false</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">)</span> <span class="p">{});</span>
        <span class="nx">db</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">insert</span><span class="p">({</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">existingPage</span><span class="dl">'</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">docs</span><span class="p">){});</span>
      <span class="p">});</span>

      <span class="nx">it</span><span class="p">(</span><span class="dl">'</span><span class="s1">should respond with 200 status</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
        <span class="nx">request</span><span class="p">(</span><span class="nx">server</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/pages/existingPage</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">send</span><span class="p">({</span><span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">existingPage</span><span class="dl">'</span><span class="p">,</span> <span class="na">url</span><span class="p">:</span><span class="dl">'</span><span class="s1">/somewhereElse</span><span class="dl">'</span><span class="p">})</span>
          <span class="p">.</span><span class="kd">set</span><span class="p">(</span><span class="dl">'</span><span class="s1">Accept</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">text/json</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">,</span> <span class="sr">/json/</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="dl">'</span><span class="s1">location</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">/somewhereElse</span><span class="dl">'</span><span class="p">)</span>
          <span class="p">.</span><span class="nx">expect</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="nx">done</span><span class="p">);</span>
      <span class="p">});</span>

    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>and an alteration to the server file to make those tests pass:</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="dl">'</span><span class="s1">/pages/:page</span><span class="dl">'</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">pageName</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">page</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="o">||</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyNames</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">).</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="mi">400</span><span class="p">,</span> <span class="p">{});</span>
    <span class="p">}</span>
    <span class="nx">db</span><span class="p">.</span><span class="nx">pages</span><span class="p">.</span><span class="nx">findAndModify</span><span class="p">({</span>
        <span class="na">query</span><span class="p">:</span> <span class="p">{</span> <span class="na">name</span><span class="p">:</span> <span class="nx">pageName</span> <span class="p">},</span>
        <span class="na">update</span><span class="p">:</span> <span class="p">{</span> <span class="na">$set</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span> <span class="p">},</span>
        <span class="na">upsert</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">new</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">doc</span><span class="p">,</span> <span class="nx">lastErrorObject</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">next</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">res</span><span class="p">.</span><span class="nx">location</span><span class="p">(</span><span class="nx">doc</span><span class="p">.</span><span class="nx">url</span> <span class="o">||</span> <span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="nx">lastErrorObject</span><span class="p">.</span><span class="nx">updatedExisting</span><span class="p">)</span> <span class="p">{</span>
                <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span> <span class="p">{});</span> 
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">res</span><span class="p">.</span><span class="nx">json</span><span class="p">(</span><span class="mi">201</span><span class="p">,{});</span> 
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">});</span>
</code></pre></div></div>

<p>Again this code feels a bit ugly to meâ€¦ there's a lot bunched up together - but it can be revisited as it's covered by tests. Importantly it works and allows storage of new pages and edits to existing pages</p>

<p>And, yes, I know that any unauthorised user can edit with thisâ€¦ authentication is still to come!</p>
:ET