I"†A<h1 id="dry-or-wet">DRY or WET?</h1>

<p>DRY, in software developement, stands for Don't Repeat Yourself. This is often taken to mean remove any duplication of lines of code. Take <a href="https://www.codementor.io/joshuaaroke/dry-code-vs-wet-code-89xjwv11w">this article</a> from the <a href="https://www.google.co.uk/search?q=software+dry&amp;oq=software+dry">front page of Google results</a>. Or on <a href="http://programmer.97things.oreilly.com/wiki/index.php/Don't_Repeat_Yourself">this page</a> that says "Every line of code that goes into an application must be maintained, and is a potential source of future bugs. Duplication needlessly bloats the codebase"</p>

<p>Often this is compared to WET code - which stands for Write Everything Twice. Reinforcing the idea that this is about the amount you type. Below we're going to look at what the impact of removing duplication of lines of code does to some software, hopefully demonstrate that it isn't desirable as an absolute rule, and show what the better way might be.</p>

<!--more-->

<p>We're making an internet cafe and so we need software to make internet drinks</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span> <span class="p">=</span> <span class="s">"pour a Coffee(milk=$milk, sugar=$sugar)"</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This instructs the barista</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pour a Coffee(milk=1, sugar=0)
</code></pre></div></div>

<p>Great, customers like it. Let's add tea!</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span> <span class="p">=</span> <span class="s">"Coffee(milk=$milk, sugar=$sugar)"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Tea</span><span class="p">(</span><span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span> <span class="p">=</span> <span class="s">"Tea(milk=$milk, sugar=$sugar)"</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Woah! Wait! That violates DRY! There's loads of duplication. Let's remove it.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span> <span class="p">=</span> <span class="s">"pour a $name(milk=$milk, sugar=$sugar)"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Coffee"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">)</span>

<span class="kd">class</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Tea"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">)</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Phew, now we won't get thrown out of the Agiles and can carry on building our internet cafe global super-company.</p>

<h1 id="brilliant-thats-dry">Brilliant, that's DRY?</h1>

<p>Yep, no repetition. Everything is hunky-dory.</p>

<p>The next feature request comes in.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>As a User
I want to add warm milk
So that I can buy a warmer drink
</code></pre></div></div>

<p>(yep, <em>I</em> know that's an awful user story but this imaginary dev team think they are nailing it)</p>

<p>Taking advantage of named and default parameters we can add a warm milk property to drinks.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"Drink"</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a $name(milk=$milk, warmMilk=$warmMilk, sugar=$sugar)"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Coffee"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">)</span>

<span class="kd">class</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Tea"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">)</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">warmerCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">warmerCoffee</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>And the next request:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
As a User
I want to order chocolate sprinkles
So that I can spend more money

</code></pre></div></div>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"Drink"</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">chocolateSprinkles</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span>
<span class="p">)</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a $name(milk=$milk, warmMilk=$warmMilk, sugar=$sugar, chocolateSprinkles=$chocolateSprinkles)"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">chocolateSprinkles</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Coffee"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">,</span> <span class="n">chocolateSprinkles</span><span class="p">)</span>

<span class="kd">class</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Tea"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">)</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">warmerCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">warmerCoffee</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">mocha</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">chocolateSprinkles</span> <span class="p">=</span> <span class="mi">4</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">mocha</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>The money is pouring in. And our code is as DRY as possible. We added chocolate sprinkles without breaking a sweat.</p>

<p>Next we can add lemon in tea and hazelnut syrup in coffee in a single code change. We're on fire!</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"Drink"</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">chocolateSprinkles</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">lemon</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">hazelnutSyrup</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span>
<span class="p">)</span> <span class="p">{</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span> <span class="p">=</span>
      <span class="s">"pour a $name(milk=$milk, "</span> <span class="p">+</span>
        <span class="s">"warmMilk=$warmMilk, "</span> <span class="p">+</span>
        <span class="s">"sugar=$sugar, "</span> <span class="p">+</span>
        <span class="s">"chocolateSprinkles=$chocolateSprinkles, "</span> <span class="p">+</span>
        <span class="s">"lemon=$lemon, "</span> <span class="p">+</span>
        <span class="s">"hazelnutSyrup=$hazelnutSyrup)"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">chocolateSprinkles</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">hazelnutSyrup</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Coffee"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">,</span> <span class="n">chocolateSprinkles</span><span class="p">,</span> <span class="n">hazelnutSyrup</span><span class="p">)</span>

<span class="kd">class</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">lemon</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Tea"</span><span class="p">,</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span><span class="p">,</span> <span class="n">lemon</span><span class="p">)</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">warmerCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">warmerCoffee</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">mocha</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">chocolateSprinkles</span> <span class="p">=</span> <span class="mi">4</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">mocha</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>Pretty soon after deployment disaster strikes! Barista Mike Acawfe reports</p>

<blockquote>
  <p>this latest software version is a disaster. It's adding lemon to hazelnut coffee and chocolate sprinkes to tea ordered with lemon.</p>
</blockquote>

<p>ugh, I knew we should have tried that new fangled unit testing. All the code compiles but the <a href="http://connascence.io/position.html">position of the parameters matters</a> in how they get from the <code class="language-plaintext highlighter-rouge">Coffee</code> and <code class="language-plaintext highlighter-rouge">Tea</code> classes to the base <code class="language-plaintext highlighter-rouge">Drink</code> class.</p>

<p>You can fix this with more named parameters!</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="s">"Drink"</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">chocolateSprinkles</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">lemon</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">hazelnutSyrup</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span>
<span class="p">)</span> <span class="p">{</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span> <span class="p">=</span>
      <span class="s">"pour a $name(milk=$milk, "</span> <span class="p">+</span>
        <span class="s">"warmMilk=$warmMilk, "</span> <span class="p">+</span>
        <span class="s">"sugar=$sugar, "</span> <span class="p">+</span>
        <span class="s">"chocolateSprinkles=$chocolateSprinkles, "</span> <span class="p">+</span>
        <span class="s">"lemon=$lemon, "</span> <span class="p">+</span>
        <span class="s">"hazelnutSyrup=$hazelnutSyrup)"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span>
  <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">chocolateSprinkles</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">hazelnutSyrup</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Coffee"</span><span class="p">,</span> <span class="n">milk</span> <span class="p">=</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span> <span class="p">=</span> <span class="n">warmMilk</span><span class="p">,</span>
  <span class="n">sugar</span> <span class="p">=</span> <span class="n">sugar</span><span class="p">,</span> <span class="n">chocolateSprinkles</span> <span class="p">=</span> <span class="n">chocolateSprinkles</span><span class="p">,</span> <span class="n">hazelnutSyrup</span> <span class="p">=</span> <span class="n">hazelnutSyrup</span><span class="p">)</span>

<span class="kd">class</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">warmMilk</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sugar</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">lemon</span><span class="p">:</span> <span class="nc">Int</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
  <span class="p">:</span> <span class="nc">Drink</span><span class="p">(</span><span class="s">"Tea"</span><span class="p">,</span> <span class="n">milk</span> <span class="p">=</span> <span class="n">milk</span><span class="p">,</span> <span class="n">warmMilk</span> <span class="p">=</span> <span class="n">warmMilk</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="n">sugar</span><span class="p">,</span> <span class="n">lemon</span> <span class="p">=</span> <span class="n">lemon</span><span class="p">)</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">milk</span> <span class="p">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">3</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">warmerCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">warmerCoffee</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">mocha</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">(</span><span class="n">warmMilk</span> <span class="p">=</span>  <span class="mi">2</span><span class="p">,</span> <span class="n">sugar</span> <span class="p">=</span> <span class="mi">2</span><span class="p">,</span> <span class="n">chocolateSprinkles</span> <span class="p">=</span> <span class="mi">4</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">mocha</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">lemonTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">(</span><span class="n">lemon</span> <span class="p">=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">lemonTea</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>But, something is bothering you. It was hard to spot this bug because even though there's no duplication of code there's actually lots of duplication of names. This lovely DRY code uses the word milk nine times. In fact each of the ingredients is mentioned nine times. So any new ingredient means edits in nine places.</p>

<p>And the call through to the base class constructor duplicates the constructor on the line above. Any changes to the ingredients and you'll need to change both constructors.</p>

<p>You meet a friend for coffee and, since it's on your mind, ask how they would remove this last duplication?!</p>

<h2 id="each-idea-once-and-only-once">Each idea once and only once</h2>

<p>Your friend explains that <a href="http://wiki.c2.com/?DontRepeatYourself">DRY isn't about code. It's about ideas!</a> The reason you're struggling is that the idea that some drinks have milk and others lemon is hidden because you've treated removing lines of code as an absolute rule.</p>

<p>They offer to help you rewrite your code with that in mind.</p>

<p>The first idea that's missing is that there are types of ingredients.</p>

<p>The second idea is that each drink is a collection of ingredients that should be printed out for the baristas.</p>

<p>So you start with a marker interface and a set of data classes. Each drink then allows you to add a subset of the possible interfaces and prints out the barista's instructions.</p>

<p>At the same time you add the concept of temperature to milk so you don't have to have implicitly cold milk separately from warm milk.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">interface</span> <span class="nc">Ingredient</span>

<span class="k">enum</span> <span class="kd">class</span> <span class="nc">Temperature</span> <span class="p">{</span>
    <span class="nc">WARM</span><span class="p">,</span> <span class="nc">COLD</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">Sugar</span><span class="p">(</span><span class="kd">val</span> <span class="py">spoons</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>
<span class="kd">data class</span> <span class="nc">Milk</span><span class="p">(</span><span class="kd">val</span> <span class="py">glugs</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">temperature</span><span class="p">:</span> <span class="nc">Temperature</span> <span class="p">=</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">COLD</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>
<span class="kd">data class</span> <span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="kd">val</span> <span class="py">pinches</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>
<span class="kd">data class</span> <span class="nc">HazelnutSyrup</span><span class="p">(</span><span class="kd">val</span> <span class="py">shots</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>
<span class="kd">data class</span> <span class="nc">Lemon</span><span class="p">(</span><span class="kd">val</span> <span class="py">squeezes</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>

<span class="kd">class</span> <span class="nc">Coffee</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Sugar</span><span class="p">):</span> <span class="nc">Coffee</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Milk</span><span class="p">):</span> <span class="nc">Coffee</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">ChocolateSprinkles</span><span class="p">):</span> <span class="nc">Coffee</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">HazelnutSyrup</span><span class="p">):</span> <span class="nc">Coffee</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a Coffee(${ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Tea</span> <span class="p">{</span>
    <span class="k">private</span> <span class="kd">val</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Sugar</span><span class="p">):</span> <span class="nc">Tea</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Milk</span><span class="p">):</span> <span class="nc">Tea</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Lemon</span><span class="p">):</span> <span class="nc">Tea</span> <span class="p">{</span>
        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a Tea(${ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">sugaryCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">sugaryCoffee</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">warmerCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">WARM</span><span class="p">)).</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">warmerCoffee</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">mocha</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">WARM</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">mocha</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">theFancyCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">WARM</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">HazelnutSyrup</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="n">theFancyCoffee</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">1</span><span class="p">)).</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">)</span>

    <span class="kd">val</span> <span class="py">lemonTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Lemon</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
    <span class="nf">println</span><span class="p">(</span><span class="n">lemonTea</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This prints out</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
pour a Coffee(Milk(glugs=1))
pour a Coffee(Sugar(spoons=3))
pour a Coffee(WarmMilk(glugs=2),Sugar(spoons=3))
pour a Coffee(WarmMilk(glugs=2),Sugar(spoons=2),ChocolateSprinkles(pinches=4))
pour a Coffee(WarmMilk(glugs=2),Sugar(spoons=2),ChocolateSprinkles(pinches=4),HazelnutSyrup(shots=2))
pour a Tea(Milk(glugs=1),Sugar(spoons=3))
pour a Tea(Lemon(squeezes=1))

</code></pre></div></div>

<p>Notice the awesome <code class="language-plaintext highlighter-rouge">toString</code> output that Kotlin's data classes give you for the <code class="language-plaintext highlighter-rouge">Ingredient</code>s.</p>

<p>Now the word milk is only in the code three times. Once when it is declared and once in each drink.</p>

<p>But there is still duplication of the idea that a drink can have ingredients added. In fact each drink has almost the same method repeated for each ingredient. All to avoid being able to put chocolate sprinkles in tea.</p>

<p>So the <em>idea</em> that chocolate sprinkles aren't a tea ingredient is implicit in the fact that there's no method for it. It isn't represented <a href="http://wiki.c2.com/?OnceAndOnlyOnce">once and only once</a>.</p>

<p>One option is to accept any ingredient to the method but explicitly refuse ones that shouldn't be added</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="nc">Coffee</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nc">ItIsNotOKToPutLemonInCoffee</span> <span class="p">:</span> <span class="nc">Throwable</span><span class="p">()</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">):</span> <span class="nc">Coffee</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ingredient</span> <span class="k">is</span> <span class="nc">Lemon</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">ItIsNotOKToPutLemonInCoffee</span><span class="p">()</span>
        <span class="p">}</span>

        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a Coffee(${ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Tea</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nc">ItIsNotOKToPutThisIngredientInTea</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">)</span>
      <span class="p">:</span> <span class="nc">Throwable</span><span class="p">(</span><span class="s">"It is not OK to put $ingredient in tea"</span><span class="p">)</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">):</span> <span class="nc">Tea</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">ingredient</span> <span class="k">is</span> <span class="nc">HazelnutSyrup</span>
            <span class="p">||</span> <span class="n">ingredient</span> <span class="k">is</span> <span class="nc">ChocolateSprinkles</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">ItIsNotOKToPutThisIngredientInTea</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a Tea(${ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
<span class="p">}</span>

</code></pre></div></div>

<p>But there's still duplication of the idea. You'll have to change <code class="language-plaintext highlighter-rouge">Tea</code> or <code class="language-plaintext highlighter-rouge">Coffee</code> any time you add a new ingredient. And even though the <code class="language-plaintext highlighter-rouge">withIngredient</code> method only knows about the marker interface in its signature it has to know about concrete implementations of the interface to work. Yuk!</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">enum</span> <span class="kd">class</span> <span class="nc">Temperature</span> <span class="p">{</span>
    <span class="nc">WARM</span><span class="p">,</span> <span class="nc">COLD</span>
<span class="p">}</span>

<span class="kd">interface</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="k">true</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">Sugar</span><span class="p">(</span><span class="kd">val</span> <span class="py">spoons</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>
<span class="kd">data class</span> <span class="nc">Milk</span><span class="p">(</span><span class="kd">val</span> <span class="py">glugs</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">temperature</span><span class="p">:</span> <span class="nc">Temperature</span> <span class="p">=</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">COLD</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>

<span class="kd">data class</span> <span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="kd">val</span> <span class="py">pinches</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Coffee</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">HazelnutSyrup</span><span class="p">(</span><span class="kd">val</span> <span class="py">shots</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Coffee</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">Lemon</span><span class="p">(</span><span class="kd">val</span> <span class="py">squeezes</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Tea</span>
<span class="p">}</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">,</span> <span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span>
      <span class="p">:</span> <span class="nc">Throwable</span><span class="p">(</span><span class="s">"It is not OK to put $ingredient in ${drink.javaClass.simpleName}"</span><span class="p">)</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">):</span> <span class="nc">Drink</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">ingredient</span><span class="p">.</span><span class="nf">canBeAddedTo</span><span class="p">(</span><span class="k">this</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">Drink</span><span class="p">.</span><span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a ${this.javaClass.simpleName}(${ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span> <span class="p">:</span> <span class="nc">Drink</span><span class="p">()</span>

<span class="kd">class</span> <span class="nc">Tea</span> <span class="p">:</span> <span class="nc">Drink</span><span class="p">()</span>

</code></pre></div></div>

<p>So now ingredients know whether they can be added to a drink. They default to it being ok that they are added to any drink</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">interface</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)=</span> <span class="k">true</span>
<span class="p">}</span>

</code></pre></div></div>

<p>but can be specified as allowed only for certain drinks</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">data class</span> <span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="kd">val</span> <span class="py">pinches</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Coffee</span>
<span class="p">}</span>

</code></pre></div></div>

<p>This means that new ingredients that are added shouldn't need any modifications to the drinks.</p>

<p>Now <code class="language-plaintext highlighter-rouge">Drink</code> as an abstract class reappears. The individual drinks now only need to have a type for the <code class="language-plaintext highlighter-rouge">canBeAddedTo(drink:Drink)</code> check. It's ok to <a href="/2017/05/big-pile-of-soil.html">allow code to get more complex while you're working on it</a> as happened here when the <code class="language-plaintext highlighter-rouge">withIngredient</code> methods were exploded into <code class="language-plaintext highlighter-rouge">Coffee</code> and <code class="language-plaintext highlighter-rouge">Tea</code>.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">,</span> <span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Throwable</span><span class="p">(</span><span class="s">"It is not OK to put $ingredient in ${drink.javaClass.simpleName}"</span><span class="p">)</span>

    <span class="k">private</span> <span class="kd">val</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">MutableList</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">mutableListOf</span><span class="p">()</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">):</span> <span class="nc">Drink</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">ingredient</span><span class="p">.</span><span class="nf">canBeAddedTo</span><span class="p">(</span><span class="k">this</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">Drink</span><span class="p">.</span><span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">ingredients</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">ingredient</span><span class="p">)</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>

    <span class="k">override</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">()</span>
      <span class="p">=</span> <span class="s">"pour a ${this.javaClass.simpleName}(${ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
<span class="p">}</span>

</code></pre></div></div>

<p>I'm still confused by Java allowing methods in interfaces. <code class="language-plaintext highlighter-rouge">Ingredient</code> can be an interface but because <code class="language-plaintext highlighter-rouge">Drink</code> wants to override <code class="language-plaintext highlighter-rouge">ToString</code> it has to be an abstract class. Without that it could be an interface too Â¯\_(ãƒ„)_/Â¯</p>

<p>One idea that is still implicit is that the ingredients are printed out for the barista. So let's add an <code class="language-plaintext highlighter-rouge">OrderPrinter</code> and take the need to descibe itself out of the <code class="language-plaintext highlighter-rouge">Drink</code></p>

<p>We can also take the opportunity, since we're exposing the drink's ingredients, to make them an immutable list.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">enum</span> <span class="kd">class</span> <span class="nc">Temperature</span> <span class="p">{</span>
    <span class="nc">WARM</span><span class="p">,</span> <span class="nc">COLD</span>
<span class="p">}</span>

<span class="kd">interface</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="k">true</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">Sugar</span><span class="p">(</span><span class="kd">val</span> <span class="py">spoons</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>
<span class="kd">data class</span> <span class="nc">Milk</span><span class="p">(</span><span class="kd">val</span> <span class="py">glugs</span><span class="p">:</span> <span class="nc">Int</span><span class="p">,</span> <span class="kd">val</span> <span class="py">temperature</span><span class="p">:</span> <span class="nc">Temperature</span> <span class="p">=</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">COLD</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span>

<span class="kd">data class</span> <span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="kd">val</span> <span class="py">pinches</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Coffee</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">HazelnutSyrup</span><span class="p">(</span><span class="kd">val</span> <span class="py">shots</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Coffee</span>
<span class="p">}</span>

<span class="kd">data class</span> <span class="nc">Lemon</span><span class="p">(</span><span class="kd">val</span> <span class="py">squeezes</span><span class="p">:</span> <span class="nc">Int</span><span class="p">)</span> <span class="p">:</span> <span class="nc">Ingredient</span> <span class="p">{</span>
    <span class="k">override</span> <span class="k">fun</span> <span class="nf">canBeAddedTo</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span> <span class="p">=</span> <span class="n">drink</span> <span class="k">is</span> <span class="nc">Tea</span>
<span class="p">}</span>

<span class="k">abstract</span> <span class="kd">class</span> <span class="nc">Drink</span> <span class="p">{</span>
    <span class="kd">class</span> <span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">,</span> <span class="n">drink</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">)</span>
        <span class="p">:</span> <span class="nc">Throwable</span><span class="p">(</span><span class="s">"It is not OK to put $ingredient in ${drink.javaClass.simpleName}"</span><span class="p">)</span>

    <span class="kd">var</span> <span class="py">ingredients</span><span class="p">:</span> <span class="nc">List</span><span class="p">&lt;</span><span class="nc">Ingredient</span><span class="p">&gt;</span> <span class="p">=</span> <span class="nf">emptyList</span><span class="p">()</span>
        <span class="k">private</span> <span class="k">set</span>

    <span class="k">fun</span> <span class="nf">withIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">:</span> <span class="nc">Ingredient</span><span class="p">):</span> <span class="nc">Drink</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(!</span><span class="n">ingredient</span><span class="p">.</span><span class="nf">canBeAddedTo</span><span class="p">(</span><span class="k">this</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">throw</span> <span class="nc">Drink</span><span class="p">.</span><span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">(</span><span class="n">ingredient</span><span class="p">,</span> <span class="k">this</span><span class="p">)</span>
        <span class="p">}</span>

        <span class="n">ingredients</span> <span class="p">+=</span> <span class="n">ingredient</span>
        <span class="k">return</span> <span class="k">this</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">OrderPrinter</span> <span class="p">{</span>
    <span class="k">companion</span> <span class="k">object</span> <span class="p">{</span>
        <span class="k">fun</span> <span class="nf">instructBarista</span><span class="p">(</span><span class="n">drink</span><span class="p">:</span><span class="nc">Drink</span><span class="p">)</span>
          <span class="p">=</span> <span class="s">"pour a ${drink.javaClass.simpleName}(${drink.ingredients.joinToString("</span><span class="p">,</span><span class="s">")})"</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="nc">Coffee</span> <span class="p">:</span> <span class="nc">Drink</span><span class="p">()</span>

<span class="kd">class</span> <span class="nc">Tea</span> <span class="p">:</span> <span class="nc">Drink</span><span class="p">()</span>

<span class="k">fun</span> <span class="nf">main</span><span class="p">(</span><span class="n">args</span><span class="p">:</span> <span class="nc">Array</span><span class="p">&lt;</span><span class="nc">String</span><span class="p">&gt;)</span> <span class="p">{</span>
    <span class="kd">val</span> <span class="py">whiteCoffeeNoSugar</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">whiteCoffeeNoSugar</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">sugaryCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">sugaryCoffee</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">warmerCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">WARM</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">warmerCoffee</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">mocha</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">WARM</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">mocha</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">theFancyCoffee</span> <span class="p">=</span> <span class="nc">Coffee</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="nc">Temperature</span><span class="p">.</span><span class="nc">WARM</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="mi">4</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">HazelnutSyrup</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">theFancyCoffee</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">buildersTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">()</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Milk</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
      <span class="p">.</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Sugar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">buildersTea</span><span class="p">))</span>

    <span class="kd">val</span> <span class="py">lemonTea</span> <span class="p">=</span> <span class="nc">Tea</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">Lemon</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>

    <span class="nf">println</span><span class="p">(</span><span class="nc">OrderPrinter</span><span class="p">.</span><span class="nf">instructBarista</span><span class="p">(</span><span class="n">lemonTea</span><span class="p">))</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="nc">Tea</span><span class="p">().</span><span class="nf">withIngredient</span><span class="p">(</span><span class="nc">ChocolateSprinkles</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="n">e</span><span class="p">:</span> <span class="nc">Drink</span><span class="p">.</span><span class="nc">IsNotFitForConsumptionWithThisIngredient</span><span class="p">)</span> <span class="p">{</span>
        <span class="nf">println</span><span class="p">(</span><span class="s">"excellently did not allow chocolate in tea: $e"</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<!--alex ignore simple --->
<p>This is about twice as much code as the original DRY version. But is much more flexible for adding new ingredients without changing existing code. What DRY misses is the much more expressive <a href="https://martinfowler.com/bliki/BeckDesignRules.html">four rules of simple design</a>.</p>

<ol>
  <li>Runs all the tests</li>
  <li>Has no duplicated logic. Be wary of hidden duplication like parallel class hierarchies</li>
  <li>States every intention important to the programmer</li>
  <li>Has the fewest possible classes and methods</li>
</ol>

<p>These are in order of importance. The code in this article is manually tested but doesn't pass this as the rule is <em>runs</em> all the tests. Before fixing anything else my fictional friend should have made me write tests.</p>

<p>Rules 2, 3 and 4 are in tension with each other. If I want to state every intention to the future reader I can't only remove as many classes and methods as possible. The wonderful design pressure as I tried to show here is that you want the smallest amount of code to communicate the largest amount of the ideas it represents.</p>

<p>So, stop looking for duplicated lines of code. Stop automatically making every string a constant. And start having empathy for the future reader of your code. Leave as little of the information needed to change the code in your brain as possible by putting it in the code.</p>

<p><a href="https://github.com/pauldambra/dry-coffee">All of the code can be found on Github</a></p>
:ET